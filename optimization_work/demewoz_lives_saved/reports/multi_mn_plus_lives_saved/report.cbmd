---
title: "Effective Coverage vs. Lives Saved: A Comparison"
geometry: margin=1in
---

In this document, we will find the optimal set of nutritional interventions over space and time, first using each micronutrient's effect on effective coverage separately, and then using all interventions together to see if they yield different optimal results, using a measure of the number of lives saved from each intervention. 

## Summary of Results

```{.python .cb.nb jupyter_kernel=python3  jupyter_timeout=1000}
import import_ipynb
import os
import geopandas as gpd
os.chdir('/home/lordflaron/Documents/minimod')
import optimization_work.demewoz_lives_saved.lives_saved_analysis as lives_saved
import optimization_work.demewoz_lives_saved.folate_effective_coverage_analysis as folate
import optimization_work.demewoz_lives_saved.zinc_effective_coverage_analysis as zinc
import optimization_work.demewoz_lives_saved.vas_effective_coverage_analysis as vas
import pandas as pd

# First only get the optimal values
lives_saved_opt = lives_saved.models['lives_saved'][None].opt_df.loc[lambda df: df['opt_vals']>0].groupby(['region','time']).sum()[['cumulative_benefits', 'cumulative_costs']].assign(bau_cost_per_ben =  lives_saved.models['lives_saved'][None].cost_per_benefit/3)
lives_saved_high_opt = lives_saved.models['lives_saved_high'][None].opt_df.loc[lambda df: df['opt_vals']>0].groupby(['region','time']).sum()[['cumulative_benefits', 'cumulative_costs']].assign(bau_cost_per_ben =  lives_saved.models['lives_saved_high'][None].cost_per_benefit/3)
zinc_opt = zinc.models[None].opt_df.loc[lambda df: df['opt_vals']>0].groupby(['region','time']).sum()[['cumulative_benefits', 'cumulative_costs']].assign(bau_cost_per_ben =  zinc.models[None].cost_per_benefit/3)
vas_opt = vas.models[None].opt_df.loc[lambda df: df['opt_vals']>0].groupby(['region','time']).sum()[['cumulative_benefits', 'cumulative_costs']].assign(bau_cost_per_ben =  vas.models[None].cost_per_benefit/3)
folate_opt = folate.models[None].opt_df.loc[lambda df: df['opt_vals']>0].groupby(['region','time']).sum()[['cumulative_benefits', 'cumulative_costs']].assign(bau_cost_per_ben =  folate.models[None].cost_per_benefit/3)

# Get names of optimal interventions
lives_saved_name = lives_saved.models['lives_saved'][None].optimal_interventions
lives_saved_high_name = lives_saved.models['lives_saved_high'][None].optimal_interventions
zinc_name = zinc.models[None].optimal_interventions
vas_name = vas.models[None].optimal_interventions
folate_name = folate.models[None].optimal_interventions

# Get names of bau
lives_saved_bau = lives_saved.models['lives_saved'][None].bau_df.index.get_level_values(level='intervention').unique().tolist()
lives_saved_high_bau = lives_saved.models['lives_saved_high'][None].bau_df.index.get_level_values(level='intervention').unique().tolist()
zinc_bau = zinc.models[None].bau_df.index.get_level_values(level='intervention').unique().tolist()
vas_bau = vas.models[None].bau_df.index.get_level_values(level='intervention').unique().tolist()
folate_bau = folate.models[None].bau_df.index.get_level_values(level='intervention').unique().tolist()

opt_dict = {'Zinc\n(Children Eff. Cov.)' : zinc_opt,
'VA\n(Children Eff. Cov.)' : vas_opt,
'Folic Acid\n(WRA Eff. Cov.)' : folate_opt,
'All (Lives Saved)' : lives_saved_opt,
'All (Lives Saved, Alt.)' : lives_saved_high_opt}

df_all = pd.concat(opt_dict.values(), axis=1)

df_all.columns = pd.MultiIndex.from_product([opt_dict.keys(), ['CB', 'CC', 'BAU* Cost per Benefit']])
```

```{.python .cb.nb show=stdout:raw}
opt_int_dict = dict.fromkeys(opt_dict)

long_names_opt = ['Zinc Flour (95 mg/kg)', 'VA Oil 12 mg/kg\n+ VAS-CHD (partial)\n+ VA Cube (80 mg/kg)', 'Folic Acid Flour 1.65 mg/kg','VA Oil 9 mg/kg\n+ Zinc Flour 95 mg/kg\n+ Folic Acid Flour 5 mg/kg\n+ Folic Acid Cube 100 mg/kg', 'VA Oil 9 mg/kg\n+ VAS-CHD (partial)\n+ Zinc Flour (95 mg/kg)\n+ Folic Acid Cube (100 mg/kg)\n+ Folic Acid Flour (5 mg/kg)']


for key, value in zip(opt_int_dict, long_names_opt):
    
    opt_int_dict[key] = value

df_int_opt = pd.DataFrame(index = opt_int_dict.keys(), data = opt_int_dict.values(), columns = ['Optimal Intervention Chosen'])

df_int_opt['BAU*'] = ['Zinc Flour (95 mg/kg)', 'VA Oil 9 mg/kg\n+ VAS-CHD', 'Folic Acid Flour 1.65 mg/kg','VA Oil 9 mg/kg\n+ VAS-CHD\n+ Zinc Flour 95 mg/kg\n+ Folic Acid Flour 1.65 mg/kg', 'VA Oil 9 mg/kg\n+ VAS-CHD\n+ Zinc Flour 95 mg/kg\n+ Folic Acid Flour 1.65 mg/kg']

lives_saved_not_chosen = 'Zinc Cube 600 mg/kg, VA Oil 12 mg/kg, \nVAS Routine, Folic Acid Cube 100 mg/kg'

df_int_opt['Interventions Not Chosen'] = ['Zinc Cube 600 mg/kg', 'VA Oil 12 mg/kg,\nVAS Routine', 'Folic Acid Cube 100 mg/kg', lives_saved_not_chosen , lives_saved_not_chosen]

print(df_int_opt[['BAU*', 'Optimal Intervention Chosen', 'Interventions Not Chosen']].to_markdown(tablefmt='grid'))
```
Table: Optimally Chosen Interventions vs. BAU*. {#tbl:df_int_opt}

\*@tbl:df_int_opt shows the set of optimal interventions chosen for each micronutrient simulation as well as their Business as Usual Scenario (BAU*).

The BAU* was chosen for each simulation so that it would be consistent across effective coverage and lives saved simulations. In the case of the micronutrient effective coverage simulations, the optimal solution is the BAU* scenario for zinc and folic acid. For vitamin A, in contrast to the BAU* scenario, fortified boullion cube is also chosen. 

When we consider all interventions together, however, the optimal choice becomes different than the BAU* (which is just a composite of the micronutrient scenarios' BAU*).[^1] In contrast to the BAU*, the optimally chosen set of interventions may not include VAS campaign, and may include an addition of folic acid fortified boullion cube. Folic acid fortified flour is included at 1.65 mg/kg, not 5.0 mg/kg.

Note that, although some of the interventions chosen optimally are the same as in the BAU*, the timing and spatial distribution of each intervention may not be the same. Since MINIMOD chooses the optimal set of interventions across space and time, it may be that the appearance of an intervention may happen earlier or later in time than others and may only occur in certain parts of the country. 

The BAU* scenarios all assume a constant set of interventions across space and time.

[^1]: Notice that there are two alternative definitions for the lives saved estimates of each nutritional intervention. The resulting optimally chosen interventions are similar, but the alternative specification includes VAS campaign as well. 

We can also see the differences in how each region is affected after 10 years in terms of accumulated benefits and costs. 

```{.python .cb.nb show=stdout:raw}

df_all.index.names = ['Region', 'Time']

df_all_space = (
    df_all
    .loc[(slice(None), 10), :]
    .reset_index(level='Time', drop=True)
    .T
    .loc[(slice(None), ['CB', 'CC']), :]
    .assign(National = lambda df: df['North'] + df['South'] + df['Cities'],
        **{'% North' : lambda df: df['North']/df['National'],
        '% South' : lambda df: df['South']/df['National'],
        '% Cities' : lambda df: df['Cities']/df['National']})
    [['% North', '% South', '% Cities', 'National']]
    .applymap(lambda x: "{:,.2f}".format(x))
    .rename(index = {})
)

df_all_space.columns.names = ['']

latex_table = (
    df_all_space
    .rename(index={k:k.replace('\n', ' ') for k in opt_dict.keys()}, level=0)
    .to_latex( multirow=True, caption = 'Total Benefits and Costs Across Space', label = 'tbl:opt_space', index_names=False)
    )

note = '\\multicolumn{6}{p{.8\\textwidth}}{Note: TB= Total Benefits and TC= Total Costs}\n'
ending = '\\end{tabular}\n\\end{table}\n'

print(latex_table.replace(ending, note+ending))

```

*@tbl:opt_space shows the accumulated benefits and costs for each simulation across space. Note that the units of the benefits are dependent on the simulation.

We can also see how benefits accumulate over time, in +@tbl:opt_time.

```{.python .cb.nb show=stdout:raw}



rename_dict = {k:v for k,v in zip()}

df_opt_time = (
    df_all
    .reset_index(level='Region', drop=True)
    .groupby('Time')
    .sum()
    .applymap(lambda x: "{:,.0f}".format(x))
    )

latex_table_time = (
    df_opt_time
    .loc[:, (slice(None), ['CB'])]
    .rename(columns={k:k.replace('\n', ' ').replace('Eff. Cov.', 'EC').replace('Lives Saved', 'LS') for k in opt_dict.keys()}, level=0)
    .to_latex(multicolumn=True, bold_rows=True, caption = 'Optimal Cumulative Benefits over Time', label = 'tbl:opt_time')
    )

note = '\\multicolumn{6}{p{.8\\textwidth}}{Note: CB= Cumulative Benefits over a 10 year period, EC= Effective Coverage and LS=Lives Saved. }\n'
ending = '\\end{tabular}\n\\end{table}\n'

print(latex_table_time.replace(ending, note+ending))
```

To illustrate how different these outcomes are to the BAU* scenarios, +@fig:bau_comp shows the difference in cost-per child on a bar graph for each simulation, side by side.

```{.python .cb.nb}

import matplotlib.pyplot as plt

cpb = (
    df_all
    .loc[(slice(None), 10), :]
    .sum()
    .unstack()
    .assign(cost_per_benefit = lambda df: df['CC']/df['CB'])
    [['BAU* Cost per Benefit', 'cost_per_benefit']]
    .rename({'cost_per_benefit' : 'Optimal Cost per Benefit'}, axis=1)
    )

fig, (ax1,ax2) = plt.subplots(1,2, figsize= (15,8))

all_ls = (
    cpb
    .loc[cpb.index.str.contains('All')]
    .assign(perc_change= lambda df: (df['BAU* Cost per Benefit'] - df['Optimal Cost per Benefit'])/df['BAU* Cost per Benefit'])
    )
all_ls[['BAU* Cost per Benefit', 'Optimal Cost per Benefit']].plot.bar(ax=ax1)
eff_cov = cpb.loc[~cpb.index.str.contains('All')].assign(perc_change= lambda df: (df['BAU* Cost per Benefit'] - df['Optimal Cost per Benefit'])/df['BAU* Cost per Benefit'])
eff_cov[['BAU* Cost per Benefit', 'Optimal Cost per Benefit']].plot.bar(ax=ax2)

ax1.set_title("Lives Saved (All)")
ax2.set_title("Effective Coverage")

ax1.set_ylabel("$/Lives Saved")
ax2.set_ylabel("$/Effectively Covered")

ax1.set_xticklabels(ax1.get_xticklabels(), rotation = 90)
ax2.set_xticklabels(ax2.get_xticklabels(), rotation = 90)

fig.text(.5,-.1, "Note: EC= Effective Coverage", ha='center')


plt.tight_layout()

plt.savefig("optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/bauvsopt.png", dpi=160)

```

![Cost per Benefit Comparison of BAU* vs. Optimal](bauvsopt.png){#fig:bau_comp}

In the following sections, we will look at relevant maps that will show us how accumulated benefits evolve through time. For these sections we will use shorthand for interventions, outlined in the following table:

|Intervention| Abbreviation | 
|------------|--------------|
| Zinc Flour (95 mg/kg) | zflour|
| VA Oil 9mg/kg | oil|
| VAS-CHD | vas |
| VA Cube (80 mg/kg) | cube | 
| Folic Acid Cube (100 mg/kg) | fcube |
| Folic Acid Flour (5 mg/kg) | fflour |
| Folic Acid Flour (1.65 mg/kg) | fflour33 |


## Effective Coverage Simulations

### Vitamin A 

```{.python .cb.nb }

# Load data
geo_df = gpd.read_file("examples/data/maps/cameroon/CAM.shp")

# Now we create the boundaries for North, South and Cities
# Based on "Measuring Costs of Vitamin A..., Table 2"
north = r"Adamaoua|Nord|Extreme-Nord"
south = r"Centre|Est|Nord-Ouest|Ouest|Sud|Sud-Ouest"
cities= r"Littoral" # Duala
# Yaounde is in Mfoundi
geo_df.loc[lambda df: df['ADM1'].str.contains(north), 'space'] = 'North'
geo_df.loc[lambda df: df['ADM1'].str.contains(south), 'space'] = 'South'
geo_df.loc[lambda df: df['ADM1'].str.contains(cities), 'space'] = 'Cities'
geo_df.loc[lambda df: df['ADM2'].str.contains(r"Mfoundi"), 'space'] = 'Cities'

# Now we aggregate the data to the `space` variable
agg_geo_df = geo_df.dissolve(by = 'space')


vas.models[None].plot_map_benchmark(intervention = None, 
time = 1, 
optimum_interest = 'cb',        
bench_intervention = 'oilvas',
map_df = agg_geo_df,
merge_key = 'space',
intervention_in_title = False,
intervention_bubbles= True,
intervention_bubble_names = ['oil', 'vas', 'cube'],
bau_intervention_bubble_names = ['oil', 'vas', 'cube'],
save = 'optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/vas1.png')

plt.gcf().text(0.5,-.05, 'Note: Effective coverage (in millions)', ha='center')

vas.models[None].plot_map_benchmark(intervention = None, 
time = 3, 
optimum_interest = 'cb', 
bench_intervention = 'oilvas',
map_df = agg_geo_df,
merge_key = 'space',
intervention_in_title = False,
intervention_bubbles= True,
intervention_bubble_names = ['oil', 'vas', 'cube'],
bau_intervention_bubble_names = ['oil', 'vas', 'cube'],
save = 'optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/vas3.png')

plt.gcf().text(0.5,-.05, 'Note: Effective coverage (in millions)', ha='center')

vas.models[None].plot_map_benchmark(intervention = None, 
time = 10, 
optimum_interest = 'cb', 
bench_intervention = 'oilvas',
map_df = agg_geo_df,
merge_key = 'space',
intervention_in_title = False,
intervention_bubbles= True,
intervention_bubble_names = ['oil', 'vas', 'cube'],
bau_intervention_bubble_names = ['oil', 'vas', 'cube'],
save = 'optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/vas10.png')

plt.gcf().text(0.5,-.05, 'Note: Effective coverage (in millions)', ha='center')

fig, (ax1, ax2)  = plt.subplots(1,2, figsize=(10,6))

vas.models[None].plot_bau_time('b', ax=ax1)
vas.models[None].plot_bau_time('c', ax=ax2)
ax1.set_ylabel("Millions Effectively Covered")
ax2.set_ylabel("USD (in millions)")

plt.tight_layout()
plt.savefig('optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/vas_b_c.png', dpi=160, bbox_inches='tight')

```

For the Vitamin A simulations, we start with fortified oil (at 75% coverage), fortified cube and a VAS routine as can be seen in +@fig:vas1. By Period 4 (in +@fig:vas3), the south and cities stop VAS campaigns, but proceed with cube and oil interventions. This continues until the last period. If we compare this to the BAU* scenario, accumulated benefits have reached around the same levels in the South and cities, but with higher benefits in the North.

![Vitamin A Accumulated Benefits, T=1](vas1.png){#fig:vas1}

![Vitamin A Accumulated Benefits, T=3](vas3.png){#fig:vas3}

![Vitamin A Accumulated Benefits, T=10](vas10.png){#fig:vas10}

To illustrate the differences between benefits and costs between the optimal and BAU* scenarios, we compare the two in +@fig:vas_b_c. 

![Vitamin A Per-year Benefits and Costs across Time](vas_b_c.png){#fig:vas_b_c}



### Zinc

For zinc interventions, we see that zinc fortified flour is chosen, which is the same as the BAU* scenario. This leads to the highest benefits being in the cities, followed by the south and then the North.

```{.python .cb.nb hide=all}

zinc.models[None].plot_map_benchmark(intervention = None, 
time = 10, 
optimum_interest = 'cb',    
bench_intervention = 'zflour',
map_df = agg_geo_df,
merge_key = 'space',
intervention_in_title = False,
intervention_bubbles= True,
intervention_bubble_names = ['zflour'],
bau_intervention_bubble_names = ['zflour'],
save = 'optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/zinc10.png')

plt.gcf().text(0.5,-.05, 'Note: Effective coverage (in millions)', ha='center')

```

![Zinc Accumulated Benefits, T=10](zinc10.png){#fig:zinc10}


### Folic Acid

Folic Acid is the same as the zinc interventions, in that the BAU* intervention is chosen as the optimal intervention. Cities are disproportionately affected, compared to the South and the North.


```{.python .cb.nb hide=all}

folate.models[None].plot_map_benchmark(intervention = None, 
time = 10, 
optimum_interest = 'cb', 
bench_intervention = 'fflour33',
map_df = agg_geo_df,
merge_key = 'space',
intervention_in_title = False,
intervention_bubbles= True,
intervention_bubble_names = ['fflour33'],
bau_intervention_bubble_names = ['fflour33'],
save = 'optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/fflour10.png')

plt.gcf().text(0.5,-.05, 'Note: Effective coverage (in millions)', ha='center')

```

![Folic Acid Accumulated Benefits, T=10](fflour10.png){#fig:fflour10}


## Lives Saved

For Lives Saved, we find that the same intervention is chosen for all periods everywhere leading to accumulated benefits that are more proportionately distributed across the country, while the BAU* scenario has higher benefits in the North.

```{.python .cb.nb hide=all}

lives_saved.models['lives_saved'][None].plot_map_benchmark(intervention = None, 
time = 10, 
optimum_interest = 'cb', 
bench_intervention = 'oilvaszflourfflour33',
map_df = agg_geo_df,
merge_key = 'space',
intervention_in_title = False,
intervention_bubbles= True,
intervention_bubble_names = ['oil', 'vas', 'clinic', 'fcube', 'zflour', 'fflour', 'fflour33'],
bau_intervention_bubble_names = ['oil', 'vas', 'clinic', 'fcube', 'zflour', 'fflour33'],
millions = True,
save = 'optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/ls10.png')

plt.gcf().text(0.5,-.05, 'Note: Effective coverage (in millions)', ha='center')

fig, (ax1, ax2)  = plt.subplots(1,2, figsize=(10,6))

lives_saved.models['lives_saved'][None].plot_bau_time('b', ax=ax1)
lives_saved.models['lives_saved'][None].plot_bau_time('c', ax=ax2)

ax1.set_ylabel("Lives Saved")
ax2.set_ylabel("USD (in millions)")


plt.tight_layout()
plt.savefig('optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/ls_b_c.png', dpi=160, bbox_inches='tight')

```

![Lives Saved Accumulated Benefits, T=10](ls10.png){#fig:ls10}


We also show the difference in per-year benefits and costs in +@fig:ls_b_c.

![Lives Saved Per-Year Benefits and Costs](ls_b_c.png){#fig:ls_b_c}


### Lives Saved Alternative Definition

For the alternative definition of lives saved, we find that the same interventions are chosen across the country, apart from VAS campaigns in the north in periods 1-3 (+@fig:lshigh1). By period 4, we find that VAS campaigns stop and for the rest of time, the same interventions are used for all of the country. This leads to a similar geographic distribution by the end (+@fig:lshigh10) as the other lives saved definition, but with relatively higher benefits for the North.

```{.python .cb.nb hide=all}

lives_saved.models['lives_saved_high'][None].plot_map_benchmark(intervention = None, 
time = 1, 
optimum_interest = 'cb', 
bench_intervention = 'oilvaszflourfflour33',
map_df = agg_geo_df,
merge_key = 'space',
intervention_in_title = False,
intervention_bubbles= True,
intervention_bubble_names = ['oil', 'vas', 'clinic', 'fcube', 'zflour', 'fflour', 'fflour33'],
bau_intervention_bubble_names = ['oil', 'vas', 'clinic', 'fcube', 'zflour', 'fflour33'],
millions=True,
save = 'optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/lshigh1.png')

plt.gcf().text(0.5,-.05, 'Note: Effective coverage (in millions)', ha='center')


lives_saved.models['lives_saved_high'][None].plot_map_benchmark(intervention = None, 
time = 4, 
optimum_interest = 'cb', 
bench_intervention = 'oilvaszflourfflour33',
map_df = agg_geo_df,
merge_key = 'space',
intervention_in_title = False,
intervention_bubbles= True,
intervention_bubble_names = ['oil', 'vas', 'clinic', 'fcube', 'zflour', 'fflour', 'fflour33'],
bau_intervention_bubble_names = ['oil', 'vas', 'clinic', 'fcube', 'zflour', 'fflour33'],
millions = True,
save = 'optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/lshigh4.png')

plt.gcf().text(0.5,-.05, 'Note: Effective coverage (in millions)', ha='center')


lives_saved.models['lives_saved_high'][None].plot_map_benchmark(intervention = None, 
time = 10, 
optimum_interest = 'cb', 
bench_intervention = 'oilvaszflourfflour33',
map_df = agg_geo_df,
merge_key = 'space',
intervention_in_title = False,
intervention_bubbles= True,
intervention_bubble_names = ['oil', 'vas', 'clinic', 'fcube', 'zflour', 'fflour', 'fflour33'],
bau_intervention_bubble_names = ['oil', 'vas', 'clinic', 'fcube', 'zflour', 'fflour33'],
millions=True,
save = 'optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/lshigh10.png')

plt.gcf().text(0.5,-.05, 'Note: Effective coverage (in millions)', ha='center')


fig, (ax1, ax2)  = plt.subplots(1,2, figsize=(10,6))

lives_saved.models['lives_saved_high'][None].plot_bau_time('b', ax=ax1)
lives_saved.models['lives_saved_high'][None].plot_bau_time('c', ax=ax2)

ax1.set_ylabel("Lives Saved")
ax2.set_ylabel("USD (in millions)")

plt.tight_layout()
plt.savefig('optimization_work/demewoz_lives_saved/reports/multi_mn_plus_lives_saved/lshigh_b_c.png', dpi=160, bbox_inches='tight')
```

![Lives Saved Alternative Specification Accumulated Benefits, T=1](lshigh1.png){#fig:lshigh1}

![Lives Saved Alternative Specification Accumulated Benefits, T=4](lshigh4.png){#fig:lshigh4}

![Lives Saved Alternative Specification Accumulated Benefits, T=10](lshigh10.png){#fig:lshigh10}


We also show the difference in per-year benefits and costs in +@fig:lshigh_b_c.

![Lives Saved (Alt. Definition) Per-Year Benefits and Costs](lshigh_b_c.png){#fig:lshigh_b_c}